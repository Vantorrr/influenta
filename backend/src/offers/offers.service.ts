import { Injectable, NotFoundException, BadRequestException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Offer, OfferStatus } from './entities/offer.entity';
import { CreateOfferDto } from './dto/create-offer.dto';
import { RespondOfferDto } from './dto/respond-offer.dto';
import { User } from '@/users/entities/user.entity';
import { TelegramService } from '@/telegram/telegram.service';
import { MessagesService } from '@/messages/messages.service';
import { BloggersService } from '@/bloggers/bloggers.service';
import { AdvertisersService } from '@/advertisers/advertisers.service';

@Injectable()
export class OffersService {
  constructor(
    @InjectRepository(Offer)
    private offersRepository: Repository<Offer>,
    private telegramService: TelegramService,
    private messagesService: MessagesService,
    private bloggersService: BloggersService,
    private advertisersService: AdvertisersService,
  ) {}

  async create(createOfferDto: CreateOfferDto, user: User) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å
    if (user.role !== 'advertiser') {
      throw new BadRequestException('–¢–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
    const advertiser = await this.advertisersService.findOrCreateByUserId(user.id);
    if (!advertiser) {
      throw new BadRequestException('–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞
    const targetUser = await this.bloggersService.getUserById(createOfferDto.bloggerId);
    if (!targetUser || targetUser.role !== 'blogger') {
      throw new NotFoundException('–ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç blogger –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const blogger = {
      id: createOfferDto.bloggerId,
      userId: createOfferDto.bloggerId,
      user: targetUser,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const existingOffer = await this.offersRepository.findOne({
      where: {
        advertiserId: advertiser.id,
        bloggerId: createOfferDto.bloggerId,
        status: OfferStatus.PENDING,
      },
    });

    if (existingOffer) {
      throw new BadRequestException('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ–º—É –±–ª–æ–≥–µ—Ä—É');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    const offer = this.offersRepository.create({
      ...createOfferDto,
      advertiserId: advertiser.id,
      status: OfferStatus.PENDING,
    });

    const savedOffer = await this.offersRepository.save(offer);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä—É –≤ Telegram
    const bloggerUser = blogger.user as any;
    console.log('üîç Sending offer notification to blogger:', {
      bloggerId: blogger.id,
      userId: bloggerUser?.id,
      firstName: bloggerUser?.firstName,
      lastName: bloggerUser?.lastName,
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –≤–º–µ—Å—Ç–æ telegramId, —Ç–∞–∫ –∫–∞–∫ –≤ User entity id –∏ –µ—Å—Ç—å telegramId
    if (bloggerUser?.id) {
      try {
        const message = `üéØ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ!</b>

–û—Ç: ${user.firstName} ${user.lastName || ''} ${user.companyName ? `(${user.companyName})` : ''}
–ë—é–¥–∂–µ—Ç: ${createOfferDto.proposedBudget}‚ÇΩ
${createOfferDto.projectTitle ? `\n–ü—Ä–æ–µ–∫—Ç: ${createOfferDto.projectTitle}` : ''}

–°–æ–æ–±—â–µ–Ω–∏–µ:
${createOfferDto.message}`;

        console.log('üì§ Attempting to send message to Telegram ID:', bloggerUser.id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await this.telegramService.sendMessageWithButton(
          bloggerUser.id,
          message,
          '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
          `offers/${savedOffer.id}`
        );
        
        console.log('‚úÖ Telegram notification sent successfully');
      } catch (error) {
        console.error('‚ùå Failed to send Telegram notification:', error);
        console.error('Error details:', {
          message: error.message,
          response: error.response?.data,
        });
      }
    } else {
      console.warn('‚ö†Ô∏è No Telegram ID found for blogger');
    }

    return savedOffer;
  }

  async findAllForBlogger(user: User) {
    const blogger = await this.bloggersService.findByUserId(user.id);
    if (!blogger) {
      return { data: [], total: 0 };
    }

    const [offers, total] = await this.offersRepository.findAndCount({
      where: { bloggerId: blogger.id },
      relations: ['advertiser', 'advertiser.user'],
      order: { createdAt: 'DESC' },
    });

    return { data: offers, total };
  }

  async findAllForAdvertiser(user: User) {
    const advertiser = await this.advertisersService.findByUserId(user.id);
    if (!advertiser) {
      return { data: [], total: 0 };
    }

    const [offers, total] = await this.offersRepository.findAndCount({
      where: { advertiserId: advertiser.id },
      relations: ['blogger', 'blogger.user'],
      order: { createdAt: 'DESC' },
    });

    return { data: offers, total };
  }

  async findOne(id: string, user: User) {
    const offer = await this.offersRepository.findOne({
      where: { id },
      relations: ['advertiser', 'advertiser.user', 'blogger', 'blogger.user'],
    });

    if (!offer) {
      throw new NotFoundException('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    const canAccess = 
      (user.role === 'blogger' && offer.blogger.userId === user.id) ||
      (user.role === 'advertiser' && offer.advertiser.userId === user.id);

    if (!canAccess) {
      throw new ForbiddenException('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é');
    }

    return offer;
  }

  async respond(id: string, respondDto: RespondOfferDto, user: User) {
    const offer = await this.findOne(id, user);

    // –¢–æ–ª—å–∫–æ –±–ª–æ–≥–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if (user.role !== 'blogger' || offer.blogger.userId !== user.id) {
      throw new ForbiddenException('–¢–æ–ª—å–∫–æ –±–ª–æ–≥–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
    }

    if (offer.status !== OfferStatus.PENDING) {
      throw new BadRequestException('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    if (respondDto.accept) {
      offer.status = OfferStatus.ACCEPTED;
      offer.acceptedAt = new Date();

      // –°–æ–∑–¥–∞–µ–º —á–∞—Ç –º–µ–∂–¥—É –±–ª–æ–≥–µ—Ä–æ–º –∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–º
      try {
        const chat = await this.messagesService.createChat(
          offer.advertiser.userId,
          offer.blogger.userId,
          `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${offer.projectTitle || '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'}`
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.messagesService.sendMessage(
          offer.advertiser.userId,
          chat.id,
          `–ë–ª–æ–≥–µ—Ä –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ë—é–¥–∂–µ—Ç: ${offer.proposedBudget}‚ÇΩ`
        );
      } catch (error) {
        console.error('Failed to create chat:', error);
      }
    } else {
      offer.status = OfferStatus.REJECTED;
      offer.rejectedAt = new Date();
      offer.rejectionReason = respondDto.rejectionReason;
    }

    await this.offersRepository.save(offer);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
    const advertiserUser = offer.advertiser.user as any;
      if (advertiserUser?.id) {
      try {
        const message = respondDto.accept
          ? `‚úÖ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n–ë–ª–æ–≥–µ—Ä ${offer.blogger.user.firstName} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è.`
          : `‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n–ë–ª–æ–≥–µ—Ä ${offer.blogger.user.firstName} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n${respondDto.rejectionReason ? `–ü—Ä–∏—á–∏–Ω–∞: ${respondDto.rejectionReason}` : ''}`;

        await this.telegramService.sendMessage(advertiserUser.id, message);
      } catch (error) {
        console.error('Failed to send Telegram notification:', error);
      }
    }

    return offer;
  }
}
