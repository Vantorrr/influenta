import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '@/users/entities/user.entity';
import { Blogger } from '@/bloggers/entities/blogger.entity';
import { Advertiser } from '@/advertisers/entities/advertiser.entity';
import { Listing } from '@/listings/entities/listing.entity';
import { Response as ListingResponse } from '@/responses/entities/response.entity';

@Injectable()
export class TelegramService {
  private readonly botToken: string;
  private readonly botApiUrl: string;

  constructor(
    private configService: ConfigService,
    @InjectRepository(User) private readonly usersRepo: Repository<User>,
    @InjectRepository(Blogger) private readonly bloggersRepo: Repository<Blogger>,
    @InjectRepository(Advertiser) private readonly advertisersRepo: Repository<Advertiser>,
    @InjectRepository(Listing) private readonly listingsRepo: Repository<Listing>,
    @InjectRepository(ListingResponse) private readonly responsesRepo: Repository<ListingResponse>,
  ) {
    this.botToken = this.configService.get('app.telegram.botToken') || process.env.TELEGRAM_BOT_TOKEN || '';
    this.botApiUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async sendMessage(chatId: number, text: string, replyMarkup?: any) {
    const url = `${this.botApiUrl}/sendMessage`;
    
    const payload = {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      reply_markup: replyMarkup,
    };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      return await response.json();
    } catch (error) {
      console.error('Error sending message:', error);
      throw error;
    }
  }

  async getUserInfo(userId: number): Promise<{ username?: string; first_name?: string; last_name?: string } | null> {
    try {
      const url = `${this.botApiUrl}/getChat`;
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: userId }),
      });
      if (!response.ok) return null;
      const data = await response.json();
      if (!data?.ok || !data?.result) return null;
      return {
        username: data.result.username,
        first_name: data.result.first_name,
        last_name: data.result.last_name,
      };
    } catch {
      return null;
    }
  }

  async setWebhook(webhookUrl: string) {
    const url = `${this.botApiUrl}/setWebhook`;
    
    const payload = {
      url: webhookUrl,
      allowed_updates: ['message', 'callback_query'],
    };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      return await response.json();
    } catch (error) {
      console.error('Error setting webhook:', error);
      throw error;
    }
  }

  getWelcomeMessage(firstName: string, isAdmin: boolean = false) {
    const adminBadge = isAdmin ? 'üëë <b>–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†</b>\n\n' : '';
    
    return `${adminBadge}üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Influenta, ${firstName}!</b>

üí° <b>Influenta</b> ‚Äî —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –≤ Telegram.

üî• <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</b>
${isAdmin ? '‚Ä¢ üõ† –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π (–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)\n' : ''}‚Ä¢ üì± –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–ª–æ–≥–µ—Ä–∞ –∏–ª–∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
‚Ä¢ üéØ –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
‚Ä¢ üí¨ –û–±—â–∞—Ç—å—Å—è –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üëÜ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –û—Ç–∫—Ä—ã—Ç—å Influenta" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>`;
  }

  getInlineKeyboard(isAdmin: boolean = false) {
    const keyboard = [];
    const frontendUrl = this.configService.get('app.frontendUrl') || 'https://influentaa.vercel.app'

    if (isAdmin) {
      keyboard.push([
        { text: 'üõ† –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å', web_app: { url: `${frontendUrl}/admin/dashboard` } }
      ]);
    }

    keyboard.push([
      { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Influenta', web_app: { url: `${frontendUrl}` } }
    ]);

    keyboard.push([
      { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
      { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
    ]);

    return {
      inline_keyboard: keyboard
    };
  }

  getHelpMessage() {
    return `‚ùì <b>–ü–æ–º–æ—â—å –ø–æ Influenta</b>

<b>üéØ –î–ª—è –±–ª–æ–≥–µ—Ä–æ–≤:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–º–∞—Ç–∏–∫–∏
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
3. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π
4. –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

<b>üíº –î–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π:</b>
1. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
2. –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
3. –ü–æ–ª—É—á–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∏ –æ—Ç –±–ª–æ–≥–µ—Ä–æ–≤
4. –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.`;
  }

  async getStatsMessage() {
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [totalUsers, totalBloggers, totalAdvertisers, activeListings, totalResponses] = await Promise.all([
      this.usersRepo.count().catch(() => 0),
      this.bloggersRepo.count().catch(() => 0),
      this.advertisersRepo.count().catch(() => 0),
      this.listingsRepo.count({ where: { status: 'active' as any } }).catch(() => 0),
      this.responsesRepo.count().catch(() => 0),
    ]);

    const activeUsersEstimate = Math.max(totalUsers - Math.floor(totalUsers * 0.15), 0); // –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ 85%

    return `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Influenta</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: ${totalUsers.toLocaleString('ru-RU')}
‚Ä¢ –ë–ª–æ–≥–µ—Ä–æ–≤: ${totalBloggers.toLocaleString('ru-RU')}
‚Ä¢ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π: ${totalAdvertisers.toLocaleString('ru-RU')}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ~${activeUsersEstimate.toLocaleString('ru-RU')}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${activeListings.toLocaleString('ru-RU')}
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${totalResponses.toLocaleString('ru-RU')}

üöÄ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–∞—Å—Ç—É—â–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!</b>`;
  }

  async sendMessageWithButton(chatId: string | number, text: string, buttonText: string, appPath: string) {
    try {
      const botUsername = process.env.TELEGRAM_BOT_USERNAME || 'influentaa_bot';
      const webAppUrl = `https://t.me/${botUsername}/app?startapp=${appPath.replace(/\//g, '-')}`;
      
      console.log('üì® sendMessageWithButton called with:', {
        chatId,
        buttonText,
        webAppUrl,
        textLength: text.length
      });
      
      const url = `${this.botApiUrl}/sendMessage`;
      const payload = {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            {
              text: buttonText,
              url: webAppUrl
            }
          ]]
        }
      };
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const result = await response.json();
      
      if (!result.ok) {
        console.error('‚ùå Telegram API error:', result);
        throw new Error(result.description || 'Failed to send message');
      }
      
      console.log('‚úÖ Message sent successfully:', result.result.message_id);
      return result;
    } catch (error) {
      console.error('‚ùå Error sending message with button:', error);
      throw error;
    }
  }
}




