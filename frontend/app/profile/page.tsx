'use client'

import { useState } from 'react'
import { Edit, Save, X, User, Mail, AtSign, FileText, Phone, Globe, Users2, DollarSign, Shield, CheckCircle, AlertCircle, Clock, Camera, Upload } from 'lucide-react'
import { Layout } from '@/components/layout/navigation'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Avatar } from '@/components/ui/avatar'
import { useAuth } from '@/hooks/useAuth'
import { useEffect, useRef } from 'react'
import { authApi, analyticsApi } from '@/lib/api'
import { UserRole } from '@/types'
import { VerificationModal } from '@/components/VerificationModal'
import { SocialPlatformsSection } from '@/components/profile/SocialPlatformsSection'

export default function ProfilePage() {
  const { user, isLoading } = useAuth()
  useEffect(() => {
    if (user?.id) {
      try { analyticsApi.track('profile_view', { targetUserId: user.id }) } catch {}
    }
  }, [user?.id])
  const [isEditing, setIsEditing] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [avatarUploading, setAvatarUploading] = useState(false)
  const fileInputRef = useRef<HTMLInputElement | null>(null)
  const [showVerificationModal, setShowVerificationModal] = useState(false)
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    bio: '',
    role: UserRole.BLOGGER,
    phone: '',
    website: '',
    telegramLink: '',
    instagramLink: '',
    photoUrl: '',
    // –î–ª—è –±–ª–æ–≥–µ—Ä–æ–≤
    subscribersCount: '',
    pricePerPost: '',
    pricePerStory: '',
    categories: [] as string[]
  })

  const handleEdit = () => {
    analyticsApi.track('quick_action_click', { targetType: 'profile', targetId: 'edit' })
    if (user) {
      const rawCats: any = (user as any).categories
      const normalizedCategories = Array.isArray(rawCats)
        ? rawCats
        : typeof rawCats === 'string'
          ? rawCats.split(',').map((c: string) => c.trim()).filter(Boolean)
          : []
      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        bio: user.bio || '',
        role: user.role || UserRole.BLOGGER,
        phone: (user as any).phone || '',
        website: (user as any).website || '',
        telegramLink: (user as any).telegramLink || '',
        instagramLink: (user as any).instagramLink || '',
        photoUrl: user.photoUrl || '',
        subscribersCount: (user as any).subscribersCount || '',
        pricePerPost: (user as any).pricePerPost || '',
        pricePerStory: (user as any).pricePerStory || '',
        categories: normalizedCategories,
      })
    }
    setIsEditing(true)
  }

  const handleSave = async () => {
    if (!user) return
    
    setIsSaving(true)
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const payload: any = {
        firstName: formData.firstName || undefined,
        lastName: formData.lastName || undefined,
        email: formData.email || undefined,
        bio: formData.bio || undefined,
        role: formData.role || undefined,
        phone: formData.phone || undefined,
        website: formData.website || undefined,
        telegramLink: formData.telegramLink || undefined,
        instagramLink: formData.instagramLink || undefined,
        photoUrl: formData.photoUrl || undefined,
      }

      if (formData.subscribersCount !== '') payload.subscribersCount = parseInt(String(formData.subscribersCount).replace(/\./g, ''), 10) || 0
      if (formData.pricePerPost !== '') payload.pricePerPost = parseInt(String(formData.pricePerPost).replace(/\./g, ''), 10) || 0
      if (formData.pricePerStory !== '') payload.pricePerStory = parseInt(String(formData.pricePerStory).replace(/\./g, ''), 10) || 0
      if (formData.categories && formData.categories.length > 0) payload.categories = formData.categories.join(',')

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', payload)
      const response = await authApi.updateProfile(payload)
      console.log('Profile update response:', response)
      try { analyticsApi.track('profile_edit_save', { targetUserId: user.id }) } catch {}
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const profileResponse = await authApi.getCurrentUser()
      console.log('Fresh profile data:', profileResponse)
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API
      const userData = (profileResponse as any)?.user || profileResponse
      if (userData?.id) {
        // –û–±–Ω–æ–≤–ª—è–µ–º localStorage —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        localStorage.setItem('influenta_user', JSON.stringify(userData))
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã useAuth –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
        window.location.reload()
      }
      
      setIsEditing(false)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setIsSaving(false)
    }
  }

  const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return
    setAvatarUploading(true)
    try {
      const form = new FormData()
      form.append('file', file)
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/uploads/avatar`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('influenta_token')}`,
        },
        body: form,
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data?.message || 'Upload failed')

      // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º formData
      if (isEditing) {
        setFormData(prev => ({ ...prev, photoUrl: data.url }))
      } else {
        // –ò–Ω–∞—á–µ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        await authApi.updateProfile({ photoUrl: data.url })
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const profileResponse = await authApi.getCurrentUser()
        const userData = (profileResponse as any)?.user || profileResponse
        if (userData?.id) {
          localStorage.setItem('influenta_user', JSON.stringify(userData))
          window.location.reload()
        }
      }
    } catch (err) {
      console.error('Avatar upload error:', err)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É')
    } finally {
      setAvatarUploading(false)
    }
  }

  const handleCancel = () => {
    setIsEditing(false)
    setFormData({
      firstName: '',
      lastName: '',
      email: '',
      bio: '',
      role: UserRole.BLOGGER,
      phone: '',
      website: '',
      telegramLink: '',
      instagramLink: '',
      photoUrl: '',
      subscribersCount: '',
      pricePerPost: '',
      pricePerStory: '',
      categories: []
    })
  }

  const handleRequestVerification = () => {
    setShowVerificationModal(true)
  }

  const handleVerificationSubmit = async (data: {
    documents: string[]
    socialProofs: { platform: string; url: string; followers?: number }[]
    message: string
  }) => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/request-verification`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('influenta_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      
      const result = await response.json()
      
      if (response.ok) {
        alert(result.message)
        setShowVerificationModal(false)
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        const profileResponse = await authApi.getCurrentUser()
        if ((profileResponse as any)?.user) {
          localStorage.setItem('influenta_user', JSON.stringify((profileResponse as any).user))
          window.location.reload()
        }
      } else {
        alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏')
      }
    } catch (error) {
      console.error('Error requesting verification:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é')
    }
  }

  if (isLoading) {
    return <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-telegram-primary mx-auto mb-4"></div>
        <p className="text-telegram-textSecondary">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
      </div>
    </div>
  }

  if (!user) {
    return (
      <Layout title="–ü—Ä–æ—Ñ–∏–ª—å">
        <div className="container py-6 max-w-4xl">
          <div className="text-center">
            <h2 className="text-xl">–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ</h2>
            <p className="text-telegram-textSecondary mt-2">
              –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ Telegram Mini App, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            </p>
          </div>
        </div>
      </Layout>
    )
  }

  // –í—Ä–µ–º–µ–Ω–Ω—ã–π debug
  console.log('üîç Profile data:', user)
  console.log('üîç Bio:', user.bio)
  console.log('üîç Role:', user.role)
  console.log('üîç SubscribersCount:', (user as any).subscribersCount)
  console.log('üîç Categories:', (user as any).categories)

  return (
    <Layout title="–ü—Ä–æ—Ñ–∏–ª—å">
      <div className="container py-6 max-w-4xl">
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex flex-col gap-4">
              <div className="flex items-start gap-4">
                <Avatar
                  src={user.photoUrl}
                  firstName={user.firstName || '–ò–º—è'}
                  lastName={user.lastName || '–§–∞–º–∏–ª–∏—è'}
                  size="xl"
                />
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2 mb-1">
                    <h1 className="text-2xl font-bold truncate">
                      {user.firstName} {user.lastName}
                    </h1>
                  </div>
                  <p className="text-telegram-textSecondary mb-2">
                    @{user.username || 'username'}
                  </p>
                  {user.isVerified && (
                    <div className="inline-flex items-center gap-1.5 bg-green-500/10 text-green-500 px-3 py-1 rounded-full text-sm font-medium">
                      <CheckCircle className="w-4 h-4" />
                      –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
                    </div>
                  )}
                  {user.bio && (
                    <p className="text-telegram-text mt-3">
                      {user.bio}
                    </p>
                  )}
                </div>
              </div>
              
              <div className="flex gap-2 pt-3 border-t border-gray-700/50">
                {!isEditing ? (
                  <Button
                    variant="primary"
                    fullWidth
                    onClick={handleEdit}
                  >
                    <Edit className="w-4 h-4 mr-2" />
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="primary"
                      fullWidth
                      onClick={handleSave}
                      disabled={isSaving}
                    >
                      <Save className="w-4 h-4 mr-2" />
                      {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                    </Button>
                    <Button
                      variant="secondary"
                      fullWidth
                      onClick={handleCancel}
                      disabled={isSaving}
                    >
                      <X className="w-4 h-4 mr-2" />
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                  </>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {isEditing && (
          <Card className="mb-6">
            <CardContent className="p-6">
              <h3 className="text-lg font-semibold mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</h3>
              
              {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ */}
              <div className="mb-6 p-4 bg-telegram-bgSecondary rounded-lg">
                <div className="flex items-center gap-4">
                  <Avatar
                    src={formData.photoUrl || user.photoUrl}
                    firstName={formData.firstName || user.firstName || '–ò–º—è'}
                    lastName={formData.lastName || user.lastName || '–§–∞–º–∏–ª–∏—è'}
                    size="lg"
                  />
                  <div className="flex-1">
                    <h4 className="font-medium mb-1">–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</h4>
                    <p className="text-sm text-telegram-textSecondary mb-3">
                      –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä 400x400 –ø–∏–∫—Å–µ–ª–µ–π.
                    </p>
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/jpeg,image/png,image/webp"
                      className="sr-only"
                      onChange={handleAvatarChange}
                    />
                    <Button
                      variant="secondary"
                      size="sm"
                      disabled={avatarUploading}
                      onClick={() => fileInputRef.current?.click()}
                      className="flex items-center gap-2"
                    >
                      {avatarUploading ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-telegram-primary"></div>
                          –ó–∞–≥—Ä—É–∑–∫–∞...
                        </>
                      ) : (
                        <>
                          <Camera className="w-4 h-4" />
                          –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* –ò–º—è */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <User className="w-4 h-4 inline mr-1" />
                    –ò–º—è
                  </label>
                  <input
                    type="text"
                    value={formData.firstName}
                    onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                  />
                </div>

                {/* –§–∞–º–∏–ª–∏—è */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <User className="w-4 h-4 inline mr-1" />
                    –§–∞–º–∏–ª–∏—è
                  </label>
                  <input
                    type="text"
                    value={formData.lastName}
                    onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                  />
                </div>

                {/* Username - —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <AtSign className="w-4 h-4 inline mr-1" />
                    Username (Telegram)
                  </label>
                  <input
                    type="text"
                    value={user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω (—Å–∫—Ä—ã—Ç –≤ Telegram)'}
                    disabled
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bgSecondary text-telegram-textSecondary cursor-not-allowed"
                  />
                  <p className="text-xs text-telegram-textSecondary mt-1">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ @username, –æ–Ω –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.</p>
                </div>

                {/* Email */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <Mail className="w-4 h-4 inline mr-1" />
                    Email
                  </label>
                  <input
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                  />
                </div>

                {/* –†–æ–ª—å */}
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium mb-2">
                    <FileText className="w-4 h-4 inline mr-1" />
                    –†–æ–ª—å
                  </label>
                  <select
                    value={formData.role}
                    onChange={(e) => setFormData({ ...formData, role: e.target.value as UserRole })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                  >
                    <option value={UserRole.BLOGGER}>–ë–ª–æ–≥–µ—Ä</option>
                    <option value={UserRole.ADVERTISER}>–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å</option>
                  </select>
                </div>

                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium mb-2">
                    <FileText className="w-4 h-4 inline mr-1" />
                    –û —Å–µ–±–µ
                  </label>
                  <textarea
                    value={formData.bio}
                    onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                    rows={3}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text resize-none"
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                  />
                </div>

                {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <Phone className="w-4 h-4 inline mr-1" />
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <input
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                    placeholder="+7 (999) 123-45-67"
                  />
                </div>

                {/* –°–∞–π—Ç */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <Globe className="w-4 h-4 inline mr-1" />
                    –°–∞–π—Ç/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                  </label>
                  <input
                    type="url"
                    value={formData.website}
                    onChange={(e) => setFormData({ ...formData, website: e.target.value })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                    placeholder="https://example.com"
                  />
                </div>

                {/* Telegram —Å—Å—ã–ª–∫–∞ */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <AtSign className="w-4 h-4 inline mr-1" />
                    Telegram –∫–∞–Ω–∞–ª
                  </label>
                  <input
                    type="url"
                    value={formData.telegramLink}
                    onChange={(e) => setFormData({ ...formData, telegramLink: e.target.value })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                    placeholder="https://t.me/channel"
                  />
                </div>

                {/* Instagram —Å—Å—ã–ª–∫–∞ */}
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <Globe className="w-4 h-4 inline mr-1" />
                    Instagram
                  </label>
                  <input
                    type="url"
                    value={formData.instagramLink}
                    onChange={(e) => setFormData({ ...formData, instagramLink: e.target.value })}
                    className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                    placeholder="https://instagram.com/username"
                  />
                </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤ */}
                {formData.role === UserRole.BLOGGER && (
                  <>
                    <div>
                      <label className="block text-sm font-medium mb-2">
                        <Users2 className="w-4 h-4 inline mr-1" />
                        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                      </label>
                      <input
                        type="number"
                        value={formData.subscribersCount}
                        onChange={(e) => setFormData({ ...formData, subscribersCount: e.target.value })}
                        className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                        placeholder="10000"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-2">
                        <DollarSign className="w-4 h-4 inline mr-1" />
                        –¶–µ–Ω–∞ –∑–∞ –ø–æ—Å—Ç (‚ÇΩ)
                      </label>
                      <input
                        type="number"
                        value={formData.pricePerPost}
                        onChange={(e) => setFormData({ ...formData, pricePerPost: e.target.value })}
                        className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                        placeholder="5000"
                      />
                    </div>

                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium mb-2">
                        <DollarSign className="w-4 h-4 inline mr-1" />
                        –¶–µ–Ω–∞ –∑–∞ —Å—Ç–æ—Ä–∏—Å (‚ÇΩ)
                      </label>
                      <input
                        type="number"
                        value={formData.pricePerStory}
                        onChange={(e) => setFormData({ ...formData, pricePerStory: e.target.value })}
                        className="w-full px-3 py-2 border border-telegram-border rounded-lg bg-telegram-bg text-telegram-text"
                        placeholder="2000"
                      />
                    </div>
                  </>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
        {user.role === UserRole.BLOGGER && (
          <Card className="mb-6">
            <CardContent className="p-6">
              <h3 className="text-lg font-semibold mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–∞</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-telegram-primary">
                    {(user as any).subscribersCount ? `${(user as any).subscribersCount}` : '0'}
                  </div>
                  <div className="text-sm text-telegram-textSecondary">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-telegram-accent">
                    {(user as any).pricePerPost ? `${(user as any).pricePerPost}‚ÇΩ` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                  <div className="text-sm text-telegram-textSecondary">–ó–∞ –ø–æ—Å—Ç</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-telegram-secondary">
                    {(user as any).pricePerStory ? `${(user as any).pricePerStory}‚ÇΩ` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                  <div className="text-sm text-telegram-textSecondary">–ó–∞ —Å—Ç–æ—Ä–∏—Å</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-500">
                    ‚≠ê 5.0
                  </div>
                  <div className="text-sm text-telegram-textSecondary">–†–µ–π—Ç–∏–Ω–≥</div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏ */}
        <Card className="mb-6">
          <CardContent className="p-6">
            <h3 className="text-lg font-semibold mb-4">–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏</h3>
            <div className="space-y-3">
              {((user as any).phone || (user as any).website || (user as any).telegramLink || (user as any).instagramLink) ? (
                <>
                  {(user as any).phone && (
                    <div className="flex items-center gap-3">
                      <Phone className="w-4 h-4 text-telegram-textSecondary" />
                      <span>{(user as any).phone}</span>
                    </div>
                  )}
                  {(user as any).website && (
                    <div className="flex items-center gap-3">
                      <Globe className="w-4 h-4 text-telegram-textSecondary" />
                      <a href={(user as any).website} target="_blank" rel="noopener noreferrer" 
                         className="text-telegram-primary hover:underline">
                        {(user as any).website}
                      </a>
                    </div>
                  )}
                  {(user as any).telegramLink && (
                    <div className="flex items-center gap-3">
                      <AtSign className="w-4 h-4 text-telegram-textSecondary" />
                      <a href={(user as any).telegramLink} target="_blank" rel="noopener noreferrer"
                         className="text-telegram-primary hover:underline">
                        Telegram –∫–∞–Ω–∞–ª
                      </a>
                    </div>
                  )}
                  {(user as any).instagramLink && (
                    <div className="flex items-center gap-3">
                      <Globe className="w-4 h-4 text-telegram-textSecondary" />
                      <a href={(user as any).instagramLink} target="_blank" rel="noopener noreferrer"
                         className="text-telegram-primary hover:underline">
                        Instagram
                      </a>
                    </div>
                  )}
                </>
              ) : (
                <p className="text-telegram-textSecondary">–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤ */}
        {user?.role === UserRole.BLOGGER && (
          <div className="mb-6">
            <SocialPlatformsSection />
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ */}
        <Card className="mb-6">
          <CardContent className="p-6">
            <h3 className="text-lg font-semibold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-telegram-textSecondary">Telegram ID:</span>
                <span className="font-mono">{user.telegramId}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-telegram-textSecondary">Username:</span>
                <span>@{user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-telegram-textSecondary">–†–æ–ª—å:</span>
                <span className="capitalize">
                  {user.role === UserRole.BLOGGER ? '–ë–ª–æ–≥–µ—Ä' : 
                   user.role === UserRole.ADVERTISER ? '–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å' : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-telegram-textSecondary">Email:</span>
                <span>{user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-telegram-textSecondary">–°—Ç–∞—Ç—É—Å:</span>
                <div className="flex items-center gap-2">
                  {user.isVerified ? (
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-5 h-5 text-green-500" />
                      <span className="text-green-500 font-medium">–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</span>
                    </div>
                  ) : (
                    <div className="flex items-center gap-2">
                      <Shield className="w-5 h-5 text-yellow-500" />
                      <span className="text-yellow-500">–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –ë–ª–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        {!user.isVerified && (
          <Card>
            <CardContent className="p-6">
              <div className="flex items-start gap-4">
                <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                  (user as any).verificationRequested ? 'bg-blue-100' : 
                  (user as any).verificationData?.rejectionReason ? 'bg-red-100' : 'bg-yellow-100'
                }`}>
                  {(user as any).verificationRequested ? (
                    <Clock className="w-6 h-6 text-blue-600" />
                  ) : (user as any).verificationData?.rejectionReason ? (
                    <AlertCircle className="w-6 h-6 text-red-600" />
                  ) : (
                    <Shield className="w-6 h-6 text-yellow-600" />
                  )}
                </div>
                
                <div className="flex-1">
                  <h3 className="text-lg font-semibold mb-2">
                    {(user as any).verificationRequested ? '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' :
                     (user as any).verificationData?.rejectionReason ? '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' : 
                     '–ü—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é'}
                  </h3>
                  
                  <p className="text-telegram-textSecondary mb-4">
                    {(user as any).verificationRequested ? 
                      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.' :
                     (user as any).verificationData?.rejectionReason ? (
                      <>
                        <span className="text-red-600 font-medium">–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:</span> {(user as any).verificationData.rejectionReason}
                      </>
                     ) : 
                      '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–ª–æ—á–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.'}
                  </p>
                  
                  {!(user as any).verificationRequested && (
                    <Button 
                      variant="primary"
                      onClick={handleRequestVerification}
                    >
                      <Shield className="w-4 h-4 mr-2" />
                      {(user as any).verificationData?.rejectionReason ? '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ' : '–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é'}
                    </Button>
                  )}
                </div>
              </div>
              
              {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
              <div className="mt-6 pt-6 border-t border-telegram-border">
                <h4 className="font-medium mb-3">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                <div className="space-y-2">
                  <div className="flex items-start gap-2">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" />
                    <div>
                      <div className="font-medium">–î–æ–≤–µ—Ä–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π</div>
                      <div className="text-sm text-telegram-textSecondary">–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤</div>
                    </div>
                  </div>
                  <div className="flex items-start gap-2">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" />
                    <div>
                      <div className="font-medium">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ</div>
                      <div className="text-sm text-telegram-textSecondary">–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –≤—ã—à–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö</div>
                    </div>
                  </div>
                  <div className="flex items-start gap-2">
                    <CheckCircle className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" />
                    <div>
                      <div className="font-medium">–ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤</div>
                      <div className="text-sm text-telegram-textSecondary">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
      <VerificationModal
        isOpen={showVerificationModal}
        onClose={() => setShowVerificationModal(false)}
        onSubmit={handleVerificationSubmit}
      />
    </Layout>
  )
}